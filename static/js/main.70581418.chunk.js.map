{"version":3,"sources":["App.js","serviceWorkerRegistration.js","index.js"],"names":["App","videoRef","useRef","photoRef","useEffect","getVideo","navigator","mediaDevices","getUserMedia","video","width","window","innerWidth","height","innerHeight","then","stream","current","alert","srcObject","play","catch","err","console","log","className","ref","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"mWA6HeA,MApHf,WAyCE,IAAMC,EAAWC,iBAAO,MAClBC,EAAWD,iBAAO,MAExBE,qBAAU,WACRC,MACC,CAACJ,IAEJ,IAAMI,EAAW,WACfC,UAAUC,aACPC,aAAa,CACZC,MAAO,CAAEC,MAAOC,OAAOC,WAAYC,OAAQF,OAAOG,eAEnDC,MAAK,SAACC,GACL,IAAIP,EAAQR,EAASgB,QACjBR,IACFS,MAAM,QACNT,EAAMU,UAAYH,EAClBP,EAAMW,WAGTC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAI,OAAQF,OAGxC,OACE,sBACEG,UAAU,MADZ,UA6CE,uBAAOC,IAAKzB,IACZ,wBAAQyB,IAAKvB,QC5GbwB,EAAcC,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9B5B,UAAU6B,cACPC,SAASH,GACTlB,MAAK,SAACsB,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfpC,UAAU6B,cAAcQ,YAI1BpB,QAAQC,IACN,+GAKEU,GAAUA,EAAOU,UACnBV,EAAOU,SAASP,KAMlBd,QAAQC,IAAI,sCAGRU,GAAUA,EAAOW,WACnBX,EAAOW,UAAUR,WAO5BhB,OAAM,SAACyB,GACNvB,QAAQuB,MAAM,4CAA6CA,MCxFjEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDUnB,SAAkBjB,GACvB,GAA6C,kBAAmB5B,UAAW,CAGzE,GADkB,IAAI8C,IAAIC,IAAwB1C,OAAOkB,SAASyB,MACpDC,SAAW5C,OAAOkB,SAAS0B,OAIvC,OAGF5C,OAAO6C,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMoB,IAAN,sBAEP1B,IAgEV,SAAiCM,EAAOC,GAEtCuB,MAAMxB,EAAO,CACXyB,QAAS,CAAE,iBAAkB,YAE5B3C,MAAK,SAAC4C,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CzD,UAAU6B,cAAc6B,MAAMjD,MAAK,SAACsB,GAClCA,EAAa4B,aAAalD,MAAK,WAC7BJ,OAAOkB,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1Bb,OAAM,WACLE,QAAQC,IAAI,oEAtFV2C,CAAwBlC,EAAOC,GAI/B5B,UAAU6B,cAAc6B,MAAMjD,MAAK,WACjCQ,QAAQC,IACN,+GAMJQ,EAAgBC,EAAOC,OCnC/BkC,K","file":"static/js/main.70581418.chunk.js","sourcesContent":["import { Container, Switch, withStyles } from \"@material-ui/core\";\nimport { grey } from \"@material-ui/core/colors\";\nimport axios from \"axios\";\nimport { useEffect, useState, useRef } from \"react\";\nimport \"./App.css\";\nimport Definitions from \"./components/Definitions/Definitions\";\nimport Footer from \"./components/Footer/Footer\";\nimport Header from \"./components/Header/Header\";\n\nfunction App() {\n  // const [word, setWord] = useState(\"\");\n  // const [meanings, setMeanings] = useState([]);\n  // const [category, setCategory] = useState(\"en\");\n  // const [LightTheme, setLightTheme] = useState(false);\n\n  // const dictionaryApi = async () => {\n  //   try {\n  //     const data = await axios.get(\n  //       category === \"en\"\n  //         ? `https://api.dictionaryapi.dev/api/v2/entries/${category}/${word}`\n  //         : `https://api.tracau.vn/WBBcwnwQpV89/s/${word}/${\n  //             category === \"en - vi\" ? \"en\" : \"vi\"\n  //           }`\n  //     );\n  //     setMeanings(category === \"en\" ? data.data : data.data.sentences);\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  // };\n\n  // console.log(meanings);\n\n  // useEffect(() => {\n  //   word && dictionaryApi();\n  //   // eslint-disable-next-line\n  // }, [word, category]);\n\n  // const PurpleSwitch = withStyles({\n  //   switchBase: {\n  //     color: grey[50],\n  //     \"&$checked\": {\n  //       color: grey[900],\n  //     },\n  //     \"&$checked + $track\": {\n  //       backgroundColor: grey[500],\n  //     },\n  //   },\n  //   checked: {},\n  //   track: {},\n  // })(Switch);\n  const videoRef = useRef(null);\n  const photoRef = useRef(null);\n\n  useEffect(() => {\n    getVideo();\n  }, [videoRef]);\n\n  const getVideo = () => {\n    navigator.mediaDevices\n      .getUserMedia({\n        video: { width: window.innerWidth, height: window.innerHeight },\n      })\n      .then((stream) => {\n        let video = videoRef.current;\n        if (video) {\n          alert(\"havh\");\n          video.srcObject = stream;\n          video.play();\n        }\n      })\n      .catch((err) => console.log(\"havh\", err));\n  };\n\n  return (\n    <div\n      className=\"App\"\n      // style={{\n      //   height: \"100vh\",\n      //   backgroundColor: LightTheme ? \"#fff\" : \"#282c34\",\n      //   color: LightTheme ? \"black\" : \"white\",\n      //   transition: \"all 0.5s linear\",\n      // }}\n    >\n      {/* <Container\n        maxWidth=\"md\"\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          height: \"100vh\",\n          justifyContent: \"space-evenly\",\n        }}\n      >\n        <div\n          style={{ position: \"absolute\", top: 0, right: 15, paddingTop: 10 }}\n        >\n          <span>Chế độ {LightTheme ? \"tối\" : \"sáng\"}</span>\n          <PurpleSwitch\n            checked={LightTheme}\n            onChange={() => setLightTheme(!LightTheme)}\n          />\n        </div>\n        <Header\n          setWord={setWord}\n          category={category}\n          setCategory={setCategory}\n          word={word}\n          setMeanings={setMeanings}\n          LightTheme={LightTheme}\n        />\n        {meanings && (\n          <Definitions\n            meanings={meanings}\n            word={word}\n            LightTheme={LightTheme}\n            category={category}\n          />\n        )}\n      </Container>\n      <Footer /> */}\n      <video ref={videoRef}></video>\n      <canvas ref={photoRef}></canvas>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}